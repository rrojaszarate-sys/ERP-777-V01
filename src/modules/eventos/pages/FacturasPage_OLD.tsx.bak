/**
 * üìÑ P√°gina Principal - Gesti√≥n de Facturas Electr√≥nicas (CFDI)
 */

import React, { useState } from 'react';
import { Upload, BarChart3, List, Bell } from 'lucide-react';
import { Button } from '../../../shared/components/ui/Button';
import { InvoiceUploadModal } from '../components/InvoiceUploadModal';
import { InvoiceList } from '../components/InvoiceList';
import { InvoiceDashboard } from '../components/InvoiceDashboard';
import type { Invoice, InvoiceFilters } from '../types/Invoice';

interface FacturasPageProps {
  eventoId?: string;
}

export const FacturasPage: React.FC<FacturasPageProps> = ({ eventoId }) => {
  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);
  const [refreshTrigger, setRefreshTrigger] = useState(0);
  const [selectedTab, setSelectedTab] = useState('dashboard');
  const [filters, setFilters] = useState<InvoiceFilters>({
    year: new Date().getFullYear()
  });

  const handleUploadSuccess = (invoice: Invoice) => {
    console.log('‚úÖ Factura cargada:', invoice);
    setRefreshTrigger(prev => prev + 1);
  };

  const tabs = [
    { id: 'dashboard', label: 'Dashboard', icon: BarChart3 },
    { id: 'listado', label: 'Listado de Facturas', icon: List },
    { id: 'configuracion', label: 'Configuraci√≥n', icon: Bell }
  ];

  return (
    <div className="container mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold flex items-center gap-3">
            üìã Gesti√≥n de Facturas Electr√≥nicas
          </h1>
          <p className="text-gray-600 dark:text-gray-400 mt-1">
            Administra facturas XML (CFDI) con seguimiento autom√°tico de cobros
          </p>
        </div>
        
        <Button
          onClick={() => setIsUploadModalOpen(true)}
          disabled={!eventoId}
          size="lg"
        >
          <Upload className="w-5 h-5 mr-2" />
          Cargar Factura XML
        </Button>
      </div>

      {/* Tabs personalizados */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow">
        <div className="border-b border-gray-200 dark:border-gray-700">
          <nav className="flex space-x-4 px-6">
            {tabs.map(tab => (
              <button
                key={tab.id}
                onClick={() => setSelectedTab(tab.id)}
                className={`py-4 px-4 border-b-2 font-medium text-sm flex items-center gap-2 ${
                  selectedTab === tab.id
                    ? 'border-mint-500 text-mint-600 dark:text-mint-400'
                    : 'border-transparent text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
                }`}
              >
                <tab.icon className="w-4 h-4" />
                <span>{tab.label}</span>
              </button>
            ))}
          </nav>
        </div>

        <div className="p-6">
          {selectedTab === 'dashboard' && (
            <InvoiceDashboard filters={filters} />
          )}

          {selectedTab === 'listado' && (
              <div className="p-6">
                <InvoiceList 
                  eventoId={eventoId}
                  refreshTrigger={refreshTrigger}
                />
              </div>
            </Tab>

            <Tab
              key="alertas"
              title={
                <div className="flex items-center gap-2">
                  <Bell className="w-4 h-4" />
                  <span>Alertas y Notificaciones</span>
                </div>
              }
            >
              <div className="p-6">
                <div className="text-center py-12">
                  <Bell className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-xl font-semibold mb-2">Sistema de Alertas Autom√°ticas</h3>
                  <p className="text-gray-600 dark:text-gray-400 mb-4 max-w-2xl mx-auto">
                    Las alertas de cobro se env√≠an autom√°ticamente a los clientes y responsables seg√∫n la configuraci√≥n:
                  </p>
                  <ul className="text-left max-w-md mx-auto space-y-2 text-sm">
                    <li>‚úÖ <strong>Alerta Previa:</strong> 3 d√≠as antes del vencimiento</li>
                    <li>‚úÖ <strong>Alerta de Compromiso:</strong> El d√≠a del vencimiento</li>
                    <li>‚úÖ <strong>Alertas de Vencidas:</strong> Cada 7 d√≠as despu√©s del vencimiento</li>
                  </ul>
                  <div className="mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg max-w-md mx-auto">
                    <p className="text-sm text-blue-800 dark:text-blue-200">
                      üí° <strong>Tip:</strong> Las alertas se ejecutan autom√°ticamente cada d√≠a a las 9:00 AM
                    </p>
                  </div>
                </div>
              </div>
            </Tab>
          </Tabs>
        </CardBody>
      </Card>

      {/* Informaci√≥n de ayuda */}
      {!eventoId && (
        <Card className="border-l-4 border-l-primary">
          <CardBody>
            <div className="flex items-start gap-4">
              <div className="text-primary text-4xl">üí°</div>
              <div>
                <h3 className="font-semibold mb-2">¬øC√≥mo funciona?</h3>
                <div className="space-y-2 text-sm text-gray-600 dark:text-gray-400">
                  <p>
                    <strong>1. Selecciona un evento</strong> desde el m√≥dulo de eventos
                  </p>
                  <p>
                    <strong>2. Carga el XML</strong> de la factura electr√≥nica (CFDI)
                  </p>
                  <p>
                    <strong>3. Define los d√≠as de cr√©dito</strong> para calcular la fecha de vencimiento
                  </p>
                  <p>
                    <strong>4. El sistema autom√°ticamente:</strong>
                  </p>
                  <ul className="list-disc list-inside ml-4">
                    <li>Extrae todos los datos del XML (UUID, RFC, montos, fechas)</li>
                    <li>Calcula la fecha de compromiso de pago</li>
                    <li>Programa alertas autom√°ticas de cobro</li>
                    <li>Env√≠a emails al cliente y responsable</li>
                  </ul>
                </div>
              </div>
            </div>
          </CardBody>
        </Card>
      )}

      {/* Modal de carga */}
      {eventoId && (
        <InvoiceUploadModal
          isOpen={isUploadModalOpen}
          onClose={() => setIsUploadModalOpen(false)}
          eventoId={eventoId}
          onSuccess={handleUploadSuccess}
        />
      )}
    </div>
  );
};

export default FacturasPage;
